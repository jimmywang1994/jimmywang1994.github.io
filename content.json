{"meta":{"title":"Wwei's Blog","subtitle":"个人博客","description":"记录自己学习中的问题，分享学习的成果","author":"Wang Wei","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"redis哨兵集群搭建","slug":"redis哨兵集群搭建","date":"2019-11-01T13:57:38.000Z","updated":"2019-11-02T03:09:49.038Z","comments":true,"path":"2019/11/01/redis哨兵集群搭建/","link":"","permalink":"http://yoursite.com/2019/11/01/redis哨兵集群搭建/","excerpt":"","text":"前言最近在学习redis，版本为5.0.3，经过几天的学习，现在来到了redis哨兵集群的配置这个小结，经过学习，这部分的知识算是掌握了，现在记录一下。 1、主从复制的概念&emsp;&emsp;大家知道，互联网行业中redis的使用是非常常见的，redis最为一个高性能的内存数据库经常在互联网项目中充当高并发时的缓存数据库，可用来储存高频热点数据，可用来流量削峰，那么最为内存数据库，当遇到高并发大数据量的时候，只部署一台redis服务器肯定是不够的，那么就需要组件redis集群，集群中通常都有一台机器作为主节点，另外有2台或2台以上的机器作为从节点来实时的复制主节点的数据以防大流量的情况下主节点的宕机，那么首先是如何建立redis的集群及开启主从复制，请看下一节。 2、centos中redis搭建集群&emsp;&emsp;为了节约系统的内存使用量，我仅开了一台虚拟机搭建redis伪集群。 &emsp;&emsp;我事先安装好了redis,安装过程就不再叙述，进入redis安装目录，拷贝三份redis.conf到新建的myredis文件夹下，分别起名为redis.conf,redis6380.conf,redis6381.conf。用vim命令进入三份conf文件，设置daemonize 为yes,pidfile /var/run/redis_6379.pid,/var/run/redis_6380.pid,/var/run/redis_6381.pid,logfile “6379.log”,logfile “6380.log”,logfile “6381.log”,然后将syslog-enabled设为yes,保存并退出conf。再次进入redis安装目录，执行redis-server ../xx/redis.conf,redis-cli -p 6379,另外两个终端分别执行6380和6381的redis-cli -p，如下所示&emsp;&emsp;此时在三个终端里输入info replication命令，查看当前节点的主从信息，得知三个节点的role都是master，但我们的本意是要开启主从复制，一主两从，那么就要手动设置一下，在6380和6381的终端中输入slaveof 127.0.0.1 6379，代表6380和6381要作为6379的从机，配置完成后，再次执行info replication命令，此时可以看到6380和6381的role都变成了slave，master_port都为6379。为了看到主从复制的效果，在6379终端执行set k1 v1这种简单的命令，在6380和6381的终端执行get k1，可以看到结果为v1，结果证实了主从复制起了效果。&emsp;&emsp;为了模拟真实环境中可能出现的主机宕机的情况，我把6379的redis执行了shutdown手动关闭，此时查看6380和6381终端，执行info replication命令，发现两台终端还都是slave的状态，显然是不合适的，因为主机已经宕机了，那么剩下的从机当中必须有一台能接替他的位置，不然的话整个集群就会瘫掉，redis提供了slave of no one的命令，意思是不再做任何主机的从机，也就是自己变成主机。当我手动操作关闭主机的时候，因为我清楚主机已经宕机了，所以我可以在剩下的从机当中选一台手动执行命令，但是在实际的生产环境中，都是没有人操作的，也没有时间给你操作手动输命令去切换主机，这个时候，就要用到哨兵模式。&emsp;&emsp;都知道哨兵的意思就是放哨的，有监控的意味，Redis提供了哨兵的命令，哨兵是一个独立的进程，作为进程，它会独立运行。其原理是哨兵通过发送命令，等待Redis服务器响应，从而监控运行的多个Redis实例。&emsp;&emsp;这里的哨兵有两个作用 通过发送命令，让Redis服务器返回监控其运行状态，包括主服务器和从服务器。 当哨兵监测到master宕机，会自动将slave切换成master，然后通过发布订阅模式通知其他的从服务器，修改配置文件，让它们切换主机。&emsp;&emsp;然而一个哨兵进程对Redis服务器进行监控，可能会出现问题，为此，我们可以使用多个哨兵进行监控。各个哨兵之间还会进行监控，这样就形成了多哨兵模式。&emsp;&emsp;那么哨兵模式要怎么启用呢？redis5.0.3版本安装完成后，安装目录会有一个sentinel.conf哨兵配置文件，按照默认的配置文件不修改只拷贝的原则，将其拷贝三份到myredis目录下，分别命名为sentinal.conf，sentinal3680.conf,sentinal3681.conf,vim命令进入conf文件，分别修改port为26379，26380，26381，daemonize设置为yes，进程文件分别改名为redis-sentinel-26379.pid，redis-sentinel-26380.pid，redis-sentinel-26381.pid，log文件分别命名为26379.log，26380.log，26381.log，工作目录dir都设置为usr/local/redis-cluster，sentinel monitor mymaster 127.0.0.1 6379 2代表有两个哨兵认为一个master失效的时候，master才算真的失效。sentinel down-after-milliseconds mymaster 5000代表5秒收不到主机的应答就认为主机down了，sentinel failover-timeout mymaster 30000代表故障切换允许的毫秒数，超过这个时间，就认为故障切换失败。&emsp;&emsp;接下来，回到redis安装目录，分别执行redis-sentinal ../myredis/sentinal.conf，redis-sentinal ../myredis/sentinal6380.conf，redis-sentinal ../myredis/sentinal6381.conf，启动三个哨兵，然后执行redis-cli 命令进入redis，先把6379配置成6380和6381的主机，然后手动shutdown6379，在6380和6381中执行info replication，此时看到，6380已经成为了master。我们到redis-cluster文件夹下看看log日志，vim进入26379.log，看到以下结果&emsp;&emsp;经过22次投票，6380被选为了新的leader。这也代表着哨兵监控起了作用。","categories":[{"name":"redis","slug":"redis","permalink":"http://yoursite.com/categories/redis/"}],"tags":[{"name":"redis 集群 哨兵","slug":"redis-集群-哨兵","permalink":"http://yoursite.com/tags/redis-集群-哨兵/"}],"keywords":[{"name":"redis","slug":"redis","permalink":"http://yoursite.com/categories/redis/"}]},{"title":"markdown语法","slug":"markdown语法","date":"2019-06-25T23:11:48.000Z","updated":"2019-06-25T23:22:32.763Z","comments":true,"path":"2019/06/26/markdown语法/","link":"","permalink":"http://yoursite.com/2019/06/26/markdown语法/","excerpt":"","text":"","categories":[{"name":"其他","slug":"其他","permalink":"http://yoursite.com/categories/其他/"}],"tags":[],"keywords":[{"name":"其他","slug":"其他","permalink":"http://yoursite.com/categories/其他/"}]},{"title":"jvm必会的17个参数","slug":"jvm必会的17个参数","date":"2019-06-25T15:54:49.000Z","updated":"2019-06-25T15:59:54.181Z","comments":true,"path":"2019/06/25/jvm必会的17个参数/","link":"","permalink":"http://yoursite.com/2019/06/25/jvm必会的17个参数/","excerpt":"","text":"","categories":[{"name":"JAVA","slug":"JAVA","permalink":"http://yoursite.com/categories/JAVA/"}],"tags":[{"name":"JVM,JAVA","slug":"JVM-JAVA","permalink":"http://yoursite.com/tags/JVM-JAVA/"}],"keywords":[{"name":"JAVA","slug":"JAVA","permalink":"http://yoursite.com/categories/JAVA/"}]},{"title":"JVM优化","slug":"JVM优化","date":"2019-04-27T06:44:04.000Z","updated":"2019-06-25T15:59:54.179Z","comments":true,"path":"2019/04/27/JVM优化/","link":"","permalink":"http://yoursite.com/2019/04/27/JVM优化/","excerpt":"","text":"","categories":[],"tags":[],"keywords":[]},{"title":"读hashmap源码","slug":"读hashmap源码","date":"2019-04-22T06:56:15.000Z","updated":"2019-04-23T02:45:01.438Z","comments":true,"path":"2019/04/22/读hashmap源码/","link":"","permalink":"http://yoursite.com/2019/04/22/读hashmap源码/","excerpt":"","text":"这几天在看咕泡学院的公开课，恰好看到讲hashmap底层原理，老师在公开课中讲hashmap源码该怎么看，特此记录一下。","categories":[{"name":"JAVA","slug":"JAVA","permalink":"http://yoursite.com/categories/JAVA/"}],"tags":[{"name":"源码,JAVA","slug":"源码-JAVA","permalink":"http://yoursite.com/tags/源码-JAVA/"}],"keywords":[{"name":"JAVA","slug":"JAVA","permalink":"http://yoursite.com/categories/JAVA/"}]},{"title":"IDEA快捷键","slug":"IDEA快捷键","date":"2019-03-31T05:36:32.000Z","updated":"2019-03-31T05:41:45.561Z","comments":true,"path":"2019/03/31/IDEA快捷键/","link":"","permalink":"http://yoursite.com/2019/03/31/IDEA快捷键/","excerpt":"","text":"分享一个IDEA快捷键的设置","categories":[{"name":"其他","slug":"其他","permalink":"http://yoursite.com/categories/其他/"}],"tags":[{"name":"IDEA,教程","slug":"IDEA-教程","permalink":"http://yoursite.com/tags/IDEA-教程/"}],"keywords":[{"name":"其他","slug":"其他","permalink":"http://yoursite.com/categories/其他/"}]},{"title":"Mysql优化第一篇","slug":"Mysql优化第一篇","date":"2019-03-30T02:27:20.000Z","updated":"2019-03-31T07:04:20.633Z","comments":true,"path":"2019/03/30/Mysql优化第一篇/","link":"","permalink":"http://yoursite.com/2019/03/30/Mysql优化第一篇/","excerpt":"","text":"今天我们来讲讲Mysql数据库优化 1.Mysql索引1.1 索引的优点 为什么要创建索引？这是因为，创建索引可以大大提高系统的查询性能。 第一、通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性。 第二、可以大大加快 数据的检索速度，这也是创建索引的最主要的原因。 第三、可以加速表和表之间的连接，特别是在实现数据的参考完整性方面特别有意义。 第四、在使用分组和排序子句进行数据检索时，同样可以显著减少查询中分组和排序的时间。 第五、通过使用索引，可以在查询的过程中，使用查询优化器，提高系统的性能。 1.2 索引的缺点 也许会有人要问：增加索引有如此多的优点，为什么不对表中的每一个列创建一个索引呢？这种想法固然有其合理性，然而也有其片面性。虽然，索引有许多优点， 但是，为表中的每一个列都增加索引，是非常不明智的。 这是因为，增加索引也有许多不利的一个方面: 第一、创建索引和维护索引要耗费时间，这种时间随着数据量的增加而增加。 第二、索引需要占物理空间，除了数据表占数据空间之外，每一个索引还要占一定的物理空间。如果要建立聚簇索引，那么需要的空间就会更大。 第三、当对表中的数据进行增加、删除和修改的时候，索引也要动态的维护，这样就降低了数据的维护速度。 1.3 什么样的字段适合建立索引 索引是建立在数据库表中的某些列的上面。因此，在创建索引的时候，应该仔细考虑在哪些列上可以创建索引，在哪些列上不能创建索引。 一般来说，应该在具备下述特性的列上创建索引： 第一、在经常需要搜索的列上，可以加快搜索的速度 第二、在作为主键的列上，强制该列的唯一性和组织表中数据的排列结构； 第三、在经常用在连接的列上，这些列主要是一些外键，可以加快连接的速度； 第四、在经常需要根据范围进行搜索的列上创建索引，因为索引已经排序，其指定的范围是连续的； 第五、在经常需要排序的列上创建索引，因为索引已经排序，这样查询可以利用索引的排序，加快排序查询时间； 第六、在经常使用在WHERE子句中的列上面创建索引，加快条件的判断速度。 建立索引，一般按照select的where条件来建立，比如： select的条件是where f1 and f2，那么如果我们在字段f1或字段f2上建立索引是没有用的，只有在字段f1和f2上同时建立索引才有用等。 1.4 什么样的字段不适合创建索引: 同样，对于有些列不应该创建索引。一般来说，不应该创建索引的这些列具有下述特点： 第一，对于那些在查询中很少使用或者参考的列不应该创建索引。这是因为，既然这些列很少使用到，因此有索引或者无索引，并不能提高查询速度。相反，由于增加了索引，反而降低了系统的维护速度和增大了空间需求。 第二，对于那些只有很少数据值的列也不应该增加索引。这是因为，由于这些列的取值很少，例如人事表的性别列，在查询的结果中，结果集的数据行占了表中数据行的很大比例，即需要在表中搜索的数据行的比例很大。增加索引，并不能明显加快检索速度。 第三，对于那些定义为text, image和bit数据类型的列不应该增加索引。这是因为，这些列的数据量要么相当大，要么取值很少。 第四，当修改性能远远大于检索性能时，不应该创建索引。这是因为，修改性能和检索性能是互相矛盾的。当增加索引时，会提高检索性能，但是会降低修改性能。当减少索引时，会提高修改性能，降低检索性能。因此，当修改性能远远大于检索性能时，不应该创建索引。 1.5 索引的种类","categories":[{"name":"其他","slug":"其他","permalink":"http://yoursite.com/categories/其他/"}],"tags":[{"name":"Mysql","slug":"Mysql","permalink":"http://yoursite.com/tags/Mysql/"}],"keywords":[{"name":"其他","slug":"其他","permalink":"http://yoursite.com/categories/其他/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-03-27T12:33:21.383Z","updated":"2019-03-28T04:59:17.489Z","comments":true,"path":"2019/03/27/hello-world/","link":"","permalink":"http://yoursite.com/2019/03/27/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[],"keywords":[]}]}